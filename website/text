from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report, accuracy_score

algomodels = [logmodel_accuracy, dt_accuracy, rf_accuracy,  xgb_accuracy]

max_algo = np.max(algomodels)

print(max_algo)

if max_algo == logmodel_accuracy:
    y_hat_train = logmodel.predict(X_train)
    y_hat_test = logmodel.predict(X_test)
    
    conf_mat_logmodel = confusion_matrix(y_test,y_hat_test)
    conf_mat_logmodel
    
    
    print(classification_report(y_test,y_hat_test )) 
    print(accuracy_score(y_test, y_hat_test ))
elif max_algo == dt_accuracy:
    y_hat_train = dtmodel.predict(X_train)
    y_hat_test = dtmodel.predict(X_test)
  
    conf_mat_dtmodel = confusion_matrix(y_test,y_hat_test)
    conf_mat_dtmodel
    

    print(classification_report(y_test,y_hat_test )) 
    print(accuracy_score(y_test, y_hat_test ))
elif max_algo == rf_accuracy:
    y_hat_train = rfmodel.predict(X_train)
    y_hat_test = rfmodel.predict(X_test)

    conf_mat_rfmodel = confusion_matrix(y_test,y_hat_test)
    conf_mat_rfmodel 
    

    print(classification_report(y_test,y_hat_test )) 
    print(accuracy_score(y_test, y_hat_test ))
elif max_algo == xgb_accuracy:
    y_hat_train = model.predict(X_train)
    y_hat_test = model.predict(X_test)

    conf_mat_xgbmodel = confusion_matrix(y_test,y_hat_test)
    conf_mat_xgbmodel    
    

    print(classification_report(y_test,y_hat_test )) 
    print(accuracy_score(y_test, y_hat_test ))




# Dashboard Views

    # Pie Chart
    from plotly.offline import init_notebook_mode,iplot
    import plotly.graph_objects as go
    import cufflinks as cf
    init_notebook_mode(connected=True)


    #Gender Distribution
    lab = df["gender"].value_counts().keys().tolist()
    #values
    val = df["gender"].value_counts().values.tolist()
    trace = go.Pie(labels=lab, 
                    values=val, 
                    marker=dict(colors=['#9da4d8', '#ed7071']),
                    hole = 0.4,
                    # Seting values to 
                    hoverinfo="value")
    data = [trace]

    layout = go.Layout(dict(title="Gender Distribution",
                plot_bgcolor = "white",
                paper_bgcolor = "white",))
    fig1gender = go.Figure(data = data,layout = layout)
    graph1JSON = json.dumps(fig1gender, cls=plotly.utils.PlotlyJSONEncoder)

    #Senior Citizen Distribution
    lab = df["SeniorCitizen"].value_counts().keys().tolist()
    #values
    val = df["SeniorCitizen"].value_counts().values.tolist()
    trace = go.Pie(labels=lab, 
                    values=val, 
                    marker=dict(colors=['#ffa14a', '#ed7071']),
                    hole = 0.4,
                    # Seting values to 
                    hoverinfo="value")
    data = [trace]

    layout = go.Layout(dict(title="% of Senior Citizens",
                plot_bgcolor = "white",
                paper_bgcolor = "white",))
    fig2senior = go.Figure(data = data,layout = layout)
    graph2JSON = json.dumps(fig2senior, cls=plotly.utils.PlotlyJSONEncoder)


    # Histogram - Dependents
    # defining data
    trace = go.Histogram(x=df['Dependents'],nbinsx=3,
                    marker = dict(color = '#ed7071'))
    data = [trace]
    # defining layout
    layout = go.Layout(title="Dependents Distribution")
    # defining figure and plotting
    fig3dependents = go.Figure(data = data,layout = layout)
    graph3JSON = json.dumps(fig3dependents, cls=plotly.utils.PlotlyJSONEncoder)


    # Histogram - Partner 
    # defining data
    trace = go.Histogram(
        x=df['Partner'],
        nbinsx=3,
        marker = dict(color = '#9da4d8')
        )
    data = [trace]
    # defining layout
    layout = go.Layout(title="Partner Distribution")
    # defining figure and plotting
    fig4partner = go.Figure(data = data,layout = layout)
    graph4JSON = json.dumps(fig4partner, cls=plotly.utils.PlotlyJSONEncoder)


    # Histogram - Device Protection
    # defining data
    trace = go.Histogram(x=df['DeviceProtection'],nbinsx=3,marker = dict(color = '#6D9886'))
    data = [trace]
    # defining layout
    layout = go.Layout(title="Device Protection Distribution")
    # defining figure and plotting
    fig5device = go.Figure(data = data,layout = layout)
    graph5JSON = json.dumps(fig5device, cls=plotly.utils.PlotlyJSONEncoder)


    # Histogram - Multiple Lines
    # defining data
    trace = go.Histogram(x=df['MultipleLines'],nbinsx=3,marker = dict(color = '#6D9886'))
    data = [trace]
    # defining layout
    layout = go.Layout(title="Multiple Lines Distribution")
    # defining figure and plotting
    fig6multiple = go.Figure(data = data,layout = layout)
    graph6JSON = json.dumps(fig6multiple, cls=plotly.utils.PlotlyJSONEncoder)

    # Histogram - Online Backup
    # defining data
    trace = go.Histogram(x=df['OnlineBackup'],nbinsx=3,marker = dict(color = '#6D9886'))
    data = [trace]
    # defining layout
    layout = go.Layout(title="Online Backup Distribution")
    # defining figure and plotting
    fig7backup = go.Figure(data = data,layout = layout)
    graph7JSON = json.dumps(fig7backup, cls=plotly.utils.PlotlyJSONEncoder)


    # Histogram - Online Security
    # defining data
    trace = go.Histogram(x=df['OnlineSecurity'],nbinsx=3,marker = dict(color = '#6D9886'))
    data = [trace]
    # defining layout
    layout = go.Layout(title="Online Security Distribution")
    # defining figure and plotting
    fig8security = go.Figure(data = data,layout = layout)
    graph8JSON = json.dumps(fig8security, cls=plotly.utils.PlotlyJSONEncoder)


    # Histogram - Paperless Billing
    # defining data
    trace = go.Histogram(x=df['PaperlessBilling'],nbinsx=3,marker = dict(color = '#6D9886'))
    data = [trace]
    # defining layout
    layout = go.Layout(title="Paperless Billing Distribution")
    # defining figure and plotting
    fig9paperless = go.Figure(data = data,layout = layout)
    graph9JSON = json.dumps(fig9paperless, cls=plotly.utils.PlotlyJSONEncoder)


    # Histogram - Phone Service
    # defining data
    trace = go.Histogram(x=df['PhoneService'],nbinsx=3,marker = dict(color = '#6D9886'))
    data = [trace]
    # defining layout
    layout = go.Layout(title="Phone Service Distribution")
    # defining figure and plotting
    fig10phone = go.Figure(data = data,layout = layout)
    graph10JSON = json.dumps(fig10phone, cls=plotly.utils.PlotlyJSONEncoder)


    # Histogram - Streaming Movies
    # defining data
    trace = go.Histogram(x=df['StreamingMovies'],nbinsx=3,marker = dict(color = '#6D9886'))
    data = [trace]
    # defining layout
    layout = go.Layout(title="Streaming Movies Distribution")
    # defining figure and plotting
    fig11movies = go.Figure(data = data,layout = layout)
    graph11JSON = json.dumps(fig11movies, cls=plotly.utils.PlotlyJSONEncoder)


    # Histogram - Streaming TV
    # defining data
    trace = go.Histogram(x=df['StreamingTV'],nbinsx=3,marker = dict(color = '#6D9886'))
    data = [trace]
    # defining layout
    layout = go.Layout(title="Streaming TV Distribution")
    # defining figure and plotting
    fig12tv = go.Figure(data = data,layout = layout)
    graph12JSON = json.dumps(fig12tv, cls=plotly.utils.PlotlyJSONEncoder)


    # Histogram - Tech Support
    # defining data
    trace = go.Histogram(x=df['TechSupport'],nbinsx=3,marker = dict(color = '#6D9886'))
    data = [trace]
    # defining layout
    layout = go.Layout(title="Technical Support Distribution")
    # defining figure and plotting
    fig13techsupport = go.Figure(data = data,layout = layout)
    graph13JSON = json.dumps(fig13techsupport, cls=plotly.utils.PlotlyJSONEncoder)


    return render_template("dashboard.html", user= current_user, 
    graph1JSON=graph1JSON, 
    graph2JSON=graph2JSON, 
    graph3JSON=graph3JSON,
    graph4JSON=graph4JSON,
    graph5JSON=graph5JSON,
    graph6JSON=graph6JSON,
    graph7JSON=graph7JSON,
    graph8JSON=graph8JSON,
    graph9JSON=graph9JSON,
    graph10JSON=graph10JSON,
    graph11JSON=graph11JSON,
    graph12JSON=graph12JSON,
    graph13JSON=graph13JSON,
     )


    # Models

    class Sampledata(db.Model):
        id = db.Column(db.Integer, primary_key = True)
        customerID = db.Column(db.String(100))
        gender = db.Column(db.String(20))
        SeniorCitizen = db.Column(db.String(20))
        Partner = db.Column(db.String(20))
        Dependents = db.Column(db.String(20))
        tenure = db.Column(db.Integer)
        PhoneService = db.Column(db.String(20))
        MultipleLines = db.Column(db.String(20))
        InternetService = db.Column(db.String(100))
        OnlineSecurity = db.Column(db.String(20))
        OnlineBackup = db.Column(db.String(20))
        DeviceProtection = db.Column(db.String(20))
        TechSupport = db.Column(db.String(20))
        StreamingTV = db.Column(db.String(20))
        StreamingMovies = db.Column(db.String(20))
        Contract = db.Column(db.String(20))
        PaperlessBilling = db.Column(db.String(20))
        PaymentMethod = db.Column(db.String(20))
        MonthlyCharges = db.Column(db.Numeric)
        TotalCharges = db.Column(db.Numeric)
        Churn = db.Column(db.String(20))
        
        
        
        
               # Churn Rate by Gender
plot_by_gender = df.groupby('gender').Churn.mean().reset_index()
plot_data = [
    go.Bar(
        x=plot_by_gender['gender'],
        y=plot_by_gender['Churn'],
       width = [0.8],
        marker = dict(
            color=['#ed7071', '#ffa14a']
        )
    )
]

layout=go.Layout(
    xaxis={"type": "category"},
    yaxis={"title": "Churn Rate"},
    title="Churn Rate by Gender",
    plot_bgcolor = 'white',
    paper_bgcolor = 'white',
)

fig5 = go.Figure(data=plot_data, layout=layout)
graph5JSON = json.dumps(fig4, cls=plotly.utils.PlotlyJSONEncoder)


# Churn Rate by Internet Service
plot_by_payment = df.groupby('InternetService').Churn.mean().reset_index()
plot_data = [
    go.Bar(
        x=plot_by_payment['InternetService'],
        y=plot_by_payment['Churn'],
       width = [0.8],
        marker = dict(
            color=['#ed7071','#ffa14a', '#9da4d8', '#21ced2']
        )
    )
]

layout=go.Layout(
    xaxis={"type": "category"},
    yaxis={"title": "Churn Rate"},
    title="Churn Rate by Internet Service",
    plot_bgcolor = 'white',
    paper_bgcolor = 'white',
)

fig6 = go.Figure(data=plot_data, layout=layout)
graph6JSON = json.dumps(fig4, cls=plotly.utils.PlotlyJSONEncoder)


# Relationship of Tenure and Churn Rate
plot_by_tenure = df.groupby('tenure').Churn.mean().reset_index()
plot_data = [
    go.Scatter(
        x=plot_by_tenure['tenure'],
        y=plot_by_tenure['Churn'],
        mode = "markers",
        name = "Low",
        marker = dict(
            size = 5,
            line = dict(width=0.8),
            color='green'
        ),
    )
]

layout=go.Layout(
    yaxis={"title": "Churn Rate"},
    xaxis={"title": "Tenure"},
    title="Churn Rate and Tenure Relationship",
    plot_bgcolor = 'white',
    paper_bgcolor = 'white',
)

fig7 = go.Figure(data=plot_data, layout=layout)
graph7JSON = json.dumps(fig4, cls=plotly.utils.PlotlyJSONEncoder)
